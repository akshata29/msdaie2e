{
	"name": "06 - Charting with Synapse Notebooks",
	"properties": {
		"folder": {
			"name": "OpenDatasets"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "azsparkash",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ca819847-8222-4b1b-b891-b1d5cdb40b95"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/afa061ef-5d63-4e4f-99a7-b5027ec38eba/resourceGroups/dataaie2e/providers/Microsoft.Synapse/workspaces/azsynapsewksash/bigDataPools/azsparkash",
				"name": "azsparkash",
				"type": "Spark",
				"endpoint": "https://azsynapsewksash.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/azsparkash",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Charting in Synapse Notebook\n",
					"\n",
					"Synapse has common used data visualization packages pre installed, such as **matplotlib**, **bokeh**, **seaborn**, **altair**, **plotly**. This notebook provides examples to do data visualization using charts in Synapse notebook. \n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Matplotlib\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Line charts\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					" \n",
					"x  = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
					"y1 = [1, 3, 5, 3, 1, 3, 5, 3, 1]\n",
					"y2 = [2, 4, 6, 4, 2, 4, 6, 4, 2]\n",
					"plt.plot(x, y1, label=\"line L\")\n",
					"plt.plot(x, y2, label=\"line H\")\n",
					"plt.plot()\n",
					"\n",
					"plt.xlabel(\"x axis\")\n",
					"plt.ylabel(\"y axis\")\n",
					"plt.title(\"Line Graph Example\")\n",
					"plt.legend()\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Bar chart\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"# Look at index 4 and 6, which demonstrate overlapping cases.\n",
					"x1 = [1, 3, 4, 5, 6, 7, 9]\n",
					"y1 = [4, 7, 2, 4, 7, 8, 3]\n",
					"\n",
					"x2 = [2, 4, 6, 8, 10]\n",
					"y2 = [5, 6, 2, 6, 2]\n",
					"\n",
					"# Colors: https://matplotlib.org/api/colors_api.html\n",
					"\n",
					"plt.bar(x1, y1, label=\"Blue Bar\", color='b')\n",
					"plt.bar(x2, y2, label=\"Green Bar\", color='g')\n",
					"plt.plot()\n",
					"\n",
					"plt.xlabel(\"bar number\")\n",
					"plt.ylabel(\"bar height\")\n",
					"plt.title(\"Bar Chart Example\")\n",
					"plt.legend()\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Histogram\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"# Use numpy to generate a bunch of random data in a bell curve around 5.\n",
					"n = 5 + np.random.randn(1000)\n",
					"\n",
					"m = [m for m in range(len(n))]\n",
					"plt.bar(m, n)\n",
					"plt.title(\"Raw Data\")\n",
					"plt.show()\n",
					"\n",
					"plt.hist(n, bins=20)\n",
					"plt.title(\"Histogram\")\n",
					"plt.show()\n",
					"\n",
					"plt.hist(n, cumulative=True, bins=20)\n",
					"plt.title(\"Cumulative Histogram\")\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Scatter chart\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"x1 = [2, 3, 4]\n",
					"y1 = [5, 5, 5]\n",
					"\n",
					"x2 = [1, 2, 3, 4, 5]\n",
					"y2 = [2, 3, 2, 3, 4]\n",
					"y3 = [6, 8, 7, 8, 7]\n",
					"\n",
					"# Markers: https://matplotlib.org/api/markers_api.html\n",
					"\n",
					"plt.scatter(x1, y1)\n",
					"plt.scatter(x2, y2, marker='v', color='r')\n",
					"plt.scatter(x2, y3, marker='^', color='m')\n",
					"plt.title('Scatter Plot Example')\n",
					"plt.show()\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Stack plots\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"idxes = [ 1,  2,  3,  4,  5,  6,  7,  8,  9]\n",
					"arr1  = [23, 40, 28, 43,  8, 44, 43, 18, 17]\n",
					"arr2  = [17, 30, 22, 14, 17, 17, 29, 22, 30]\n",
					"arr3  = [15, 31, 18, 22, 18, 19, 13, 32, 39]\n",
					"\n",
					"# Adding legend for stack plots is tricky.\n",
					"plt.plot([], [], color='r', label = 'D 1')\n",
					"plt.plot([], [], color='g', label = 'D 2')\n",
					"plt.plot([], [], color='b', label = 'D 3')\n",
					"\n",
					"plt.stackplot(idxes, arr1, arr2, arr3, colors= ['r', 'g', 'b'])\n",
					"plt.title('Stack Plot Example')\n",
					"plt.legend()\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Pie charts\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"labels = 'S1', 'S2', 'S3'\n",
					"sections = [56, 66, 24]\n",
					"colors = ['c', 'g', 'y']\n",
					"\n",
					"plt.pie(sections, labels=labels, colors=colors,\n",
					"        startangle=90,\n",
					"        explode = (0, 0.1, 0),\n",
					"        autopct = '%1.2f%%')\n",
					"\n",
					"plt.axis('equal') # Try commenting this out.\n",
					"plt.title('Pie Chart Example')\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# fill_between and alpha\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"ys = 200 + np.random.randn(100)\n",
					"x = [x for x in range(len(ys))]\n",
					"\n",
					"plt.plot(x, ys, '-')\n",
					"plt.fill_between(x, ys, 195, where=(ys > 195), facecolor='g', alpha=0.6)\n",
					"\n",
					"plt.title(\"Fills and Alpha Example\")\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Subplotting using Subplot2grid\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"def random_plots():\n",
					"  xs = []\n",
					"  ys = []\n",
					"  \n",
					"  for i in range(20):\n",
					"    x = i\n",
					"    y = np.random.randint(10)\n",
					"    \n",
					"    xs.append(x)\n",
					"    ys.append(y)\n",
					"  \n",
					"  return xs, ys\n",
					"\n",
					"fig = plt.figure()\n",
					"ax1 = plt.subplot2grid((5, 2), (0, 0), rowspan=1, colspan=2)\n",
					"ax2 = plt.subplot2grid((5, 2), (1, 0), rowspan=3, colspan=2)\n",
					"ax3 = plt.subplot2grid((5, 2), (4, 0), rowspan=1, colspan=1)\n",
					"ax4 = plt.subplot2grid((5, 2), (4, 1), rowspan=1, colspan=1)\n",
					"\n",
					"x, y = random_plots()\n",
					"ax1.plot(x, y)\n",
					"\n",
					"x, y = random_plots()\n",
					"ax2.plot(x, y)\n",
					"\n",
					"x, y = random_plots()\n",
					"ax3.plot(x, y)\n",
					"\n",
					"x, y = random_plots()\n",
					"ax4.plot(x, y)\n",
					"\n",
					"plt.tight_layout()\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# 3D Scatter Plots\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"from mpl_toolkits.mplot3d import axes3d\n",
					"\n",
					"fig = plt.figure()\n",
					"ax = fig.add_subplot(111, projection = '3d')\n",
					"\n",
					"x1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
					"y1 = np.random.randint(10, size=10)\n",
					"z1 = np.random.randint(10, size=10)\n",
					"\n",
					"x2 = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n",
					"y2 = np.random.randint(-10, 0, size=10)\n",
					"z2 = np.random.randint(10, size=10)\n",
					"\n",
					"ax.scatter(x1, y1, z1, c='b', marker='o', label='blue')\n",
					"ax.scatter(x2, y2, z2, c='g', marker='D', label='green')\n",
					"\n",
					"ax.set_xlabel('x axis')\n",
					"ax.set_ylabel('y axis')\n",
					"ax.set_zlabel('z axis')\n",
					"plt.title(\"3D Scatter Plot Example\")\n",
					"plt.legend()\n",
					"plt.tight_layout()\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# 3D Bar Plots\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"fig = plt.figure()\n",
					"ax = fig.add_subplot(111, projection = '3d')\n",
					"\n",
					"x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
					"y = np.random.randint(10, size=10)\n",
					"z = np.zeros(10)\n",
					"\n",
					"dx = np.ones(10)\n",
					"dy = np.ones(10)\n",
					"dz = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
					"\n",
					"ax.bar3d(x, y, z, dx, dy, dz, color='g')\n",
					"\n",
					"ax.set_xlabel('x axis')\n",
					"ax.set_ylabel('y axis')\n",
					"ax.set_zlabel('z axis')\n",
					"plt.title(\"3D Bar Chart Example\")\n",
					"plt.tight_layout()\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Wireframe Plots\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"fig = plt.figure()\n",
					"ax = fig.add_subplot(111, projection = '3d')\n",
					"\n",
					"x, y, z = axes3d.get_test_data()\n",
					"\n",
					"ax.plot_wireframe(x, y, z, rstride = 2, cstride = 2)\n",
					"\n",
					"plt.title(\"Wireframe Plot Example\")\n",
					"plt.tight_layout()\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Seaborn\n",
					"Seaborn is a library layered on top of Matplotlib that you can use."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Scatterplot with a nice regression line fit to it, all with just one call to Seaborn's regplot.\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"import seaborn as sns\n",
					"\n",
					"# Generate some random data\n",
					"num_points = 20\n",
					"# x will be 5, 6, 7... but also twiddled randomly\n",
					"x = 5 + np.arange(num_points) + np.random.randn(num_points)\n",
					"# y will be 10, 11, 12... but twiddled even more randomly\n",
					"y = 10 + np.arange(num_points) + 5 * np.random.randn(num_points)\n",
					"sns.regplot(x=x, y=y)\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Seanborn heatmap\n",
					"\n",
					"import matplotlib.pyplot as plt\n",
					"import numpy as np\n",
					"\n",
					"# Make a 10 x 10 heatmap of some random data\n",
					"side_length = 10\n",
					"# Start with a 10 x 10 matrix with values randomized around 5\n",
					"data = 5 + np.random.randn(side_length, side_length)\n",
					"# The next two lines make the values larger as we get closer to (9, 9)\n",
					"data += np.arange(side_length)\n",
					"data += np.reshape(np.arange(side_length), (side_length, 1))\n",
					"# Generate the heatmap\n",
					"fig = plt.figure()\n",
					"ax = fig.add_subplot(111)\n",
					"sns.heatmap(data, ax=ax)\n",
					"plt.show()"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Bokeh\n",
					"You can render HTML or interactive libraries, like **bokeh**, using the **displayHTML()**.\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"import numpy as np\n",
					"from bokeh.plotting import figure, show\n",
					"from bokeh.io import output_notebook\n",
					"from bokeh.embed import file_html\n",
					"from bokeh.resources import CDN\n",
					"\n",
					"N = 4000\n",
					"x = np.random.random(size=N) * 100\n",
					"y = np.random.random(size=N) * 100\n",
					"radii = np.random.random(size=N) * 1.5\n",
					"colors = [\"#%02x%02x%02x\" % (r, g, 150) for r, g in zip(np.floor(50+2*x).astype(int), np.floor(30+2*y).astype(int))]\n",
					"\n",
					"p = figure()\n",
					"p.circle(x, y, radius=radii, fill_color=colors, fill_alpha=0.6, line_color=None)\n",
					"show(p)\n",
					"\n",
					"# create an html document that embeds the Bokeh plot\n",
					"html = file_html(p, CDN, \"my plot1\")\n",
					"\n",
					"# display this html\n",
					"displayHTML(html)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Plotting glyphs over a map using bokeh.\n",
					"\n",
					"from bokeh.plotting import figure, output_file\n",
					"from bokeh.tile_providers import get_provider, Vendors\n",
					"from bokeh.embed import file_html\n",
					"from bokeh.resources import CDN\n",
					"from bokeh.models import ColumnDataSource\n",
					"\n",
					"tile_provider = get_provider(Vendors.CARTODBPOSITRON)\n",
					"\n",
					"# range bounds supplied in web mercator coordinates\n",
					"p = figure(x_range=(-9000000,-8000000), y_range=(4000000,5000000),\n",
					"           x_axis_type=\"mercator\", y_axis_type=\"mercator\")\n",
					"p.add_tile(tile_provider)\n",
					"\n",
					"# plot datapoints on the map\n",
					"source = ColumnDataSource(\n",
					"    data=dict(x=[ -8800000, -8500000 , -8800000],\n",
					"              y=[4200000, 4500000, 4900000])\n",
					")\n",
					"\n",
					"p.circle(x=\"x\", y=\"y\", size=15, fill_color=\"blue\", fill_alpha=0.8, source=source)\n",
					"\n",
					"# create an html document that embeds the Bokeh plot\n",
					"html = file_html(p, CDN, \"my plot1\")\n",
					"\n",
					"# display this html\n",
					"displayHTML(html)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Plotly\r\n",
					"You can render HTML or interactive libraries like **Plotly**, using the **displayHTML()**."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from urllib.request import urlopen\r\n",
					"import json\r\n",
					"with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\r\n",
					"    counties = json.load(response)\r\n",
					"\r\n",
					"import pandas as pd\r\n",
					"df = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/fips-unemp-16.csv\",\r\n",
					"                   dtype={\"fips\": str})\r\n",
					"\r\n",
					"import plotly\r\n",
					"import plotly.express as px\r\n",
					"\r\n",
					"fig = px.choropleth(df, geojson=counties, locations='fips', color='unemp',\r\n",
					"                           color_continuous_scale=\"Viridis\",\r\n",
					"                           range_color=(0, 12),\r\n",
					"                           scope=\"usa\",\r\n",
					"                           labels={'unemp':'unemployment rate'}\r\n",
					"                          )\r\n",
					"fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\r\n",
					"\r\n",
					"# create an html document that embeds the Plotly plot\r\n",
					"h = plotly.offline.plot(fig, output_type='div')\r\n",
					"\r\n",
					"# display this html\r\n",
					"displayHTML(h)"
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}