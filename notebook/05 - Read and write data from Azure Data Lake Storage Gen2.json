{
	"name": "05 - Read and write data from Azure Data Lake Storage Gen2",
	"properties": {
		"folder": {
			"name": "OpenDatasets"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "azsparkash",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b9475bc4-2d1d-4544-b489-c6cae08a9ed8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/afa061ef-5d63-4e4f-99a7-b5027ec38eba/resourceGroups/dataaie2e/providers/Microsoft.Synapse/workspaces/azsynapsewksash/bigDataPools/azsparkash",
				"name": "azsparkash",
				"type": "Spark",
				"endpoint": "https://azsynapsewksash.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/azsparkash",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Access data on Azure Data Lake Storage Gen2 (ADLS Gen2) with Synapse Spark\n",
					"\n",
					"Azure Data Lake Storage Gen2 (ADLS Gen2) is used as the storage account associated with a Synapse workspace. A synapse workspace can have a default ADLS Gen2 storage account and additional linked storage accounts. \n",
					"\n",
					"You can access data on ADLS Gen2 with Synapse Spark via following URL:\n",
					"    \n",
					"    abfss://<container_name>@<storage_account_name>.dfs.core.windows.net/<path>\n",
					"\n",
					"This notebook provides examples of how to read data from ADLS Gen2 account into a Spark context and how to write the output of Spark jobs directly into an ADLS Gen2 location.\n",
					"\n",
					"## Pre-requisites\n",
					"Synapse leverage AAD pass-through to access any ADLS Gen2 account (or folder) to which you have a **Blob Storage Contributor** permission. No credentials or access token is required. "
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load a sample data\n",
					"\n",
					"Let's first load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) of last 6 months from Azure Open datasets as a sample."
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"from azureml.opendatasets import PublicHolidays\n",
					"\n",
					"from datetime import datetime\n",
					"from dateutil import parser\n",
					"from dateutil.relativedelta import relativedelta\n",
					"\n",
					"\n",
					"end_date = datetime.today()\n",
					"start_date = datetime.today() - relativedelta(months=6)\n",
					"hol = PublicHolidays(start_date=start_date, end_date=end_date)\n",
					"hol_df = hol.to_spark_dataframe()"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# Display 5 rows\n",
					"hol_df.show(5, truncate = False)"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write data to the default ADLS Gen2 storage\n",
					"\n",
					"We are going to write the spark dateframe to your default ADLS Gen2 storage account.\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import *\n",
					"\n",
					"# Primary storage info\n",
					"account_name = 'fill in your primary account name' # fill in your primary account name\n",
					"container_name = 'fill in your container name' # fill in your container name\n",
					"relative_path = 'fill in your relative folder path' # fill in your relative folder path\n",
					"\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\n",
					"print('Primary storage account path: ' + adls_path)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as Parquet, JSON or CSV\n",
					"If you have a dataframe, you can save it to Parquet or JSON with the .write.parquet(), .write.json() and .write.csv() methods respectively.\n",
					"\n",
					"Dataframes can be saved in any format, regardless of the input format.\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"parquet_path = adls_path + 'holiday.parquet'\n",
					"json_path = adls_path + 'holiday.json'\n",
					"csv_path = adls_path + 'holiday.csv'\n",
					"print('parquet file path: ' + parquet_path)\n",
					"print('json file path??? ' + json_path)\n",
					"print('csv file path: ' + csv_path)"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"hol_df.write.parquet(parquet_path, mode = 'overwrite')\n",
					"hol_df.write.json(json_path, mode = 'overwrite')\n",
					"hol_df.write.csv(csv_path, mode = 'overwrite', header = 'true')"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as text files\n",
					"If you have a dataframe that you want ot save as text file, you must first covert it to an RDD and then save that RDD as a text file.\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Define the text file path\n",
					"text_path = adls_path + 'holiday.txt'\n",
					"print('text file path: ' + text_path)"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"source": [
					"# Covert spark dataframe into RDD \n",
					"hol_RDD = hol_df.rdd\n",
					"type(hol_RDD)"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"source": [
					"If you have an RDD, you can convert it to a text file like the following:\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					" # Save RDD as text file\n",
					"hol_RDD.saveAsTextFile(text_path)"
				],
				"attachments": null,
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Read data from the default ADLS Gen2 storage\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from parquet files\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_parquet = spark.read.parquet(parquet_path)"
				],
				"attachments": null,
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from JSON files\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_json = spark.read.json(json_path)"
				],
				"attachments": null,
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from CSV files\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_csv = spark.read.csv(csv_path, header = 'true')"
				],
				"attachments": null,
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create an RDD from text file\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"text = sc.textFile(text_path)"
				],
				"attachments": null,
				"execution_count": 17
			}
		]
	}
}