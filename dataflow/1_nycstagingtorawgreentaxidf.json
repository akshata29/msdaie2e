{
	"name": "1_nycstagingtorawgreentaxidf",
	"properties": {
		"folder": {
			"name": "NycTaxi/1_StagingToRaw"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends2014non01041112",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi2014Non01041112"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends2015Non11",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi2015Non11"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends201511",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi201511"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends201601",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi201601"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends201602to11",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi201602To11"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends201612",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi201612"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends2018201401and04",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi2018201401And04"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends2017010207080911",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi2017010207080911"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends2017030405061012",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi2017030405061012"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends201802030506",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi201802030506"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends2018Q3",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi2018Q3"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends2018Q4",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi2018Q4"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends201901To08",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi201901To08"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxistagegreends2019Q4andonwards",
						"type": "DatasetReference"
					},
					"name": "StagingGreenTaxi2019Q4AndOnwards"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi2014Non01041112"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi2015Non11"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi201511"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi201601"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi201602To11"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi201612"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi2018201401And04"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi2017010207080911"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi2017030405061012"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi201802030506"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi2018Q3"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi2018Q4"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi201901To08"
				},
				{
					"dataset": {
						"referenceName": "1_nyctaxirawgreends",
						"type": "DatasetReference"
					},
					"name": "PersistGreenTaxi2019Q4AndOnwards"
				}
			],
			"transformations": [
				{
					"name": "DerivedGreenTaxi2019Q4AndOnwards"
				},
				{
					"name": "DriftGreenTaxi2014Non01041112"
				},
				{
					"name": "DriftGreenTaxi2015Non11"
				},
				{
					"name": "DerivedGreenTaxi2014Non01041112"
				},
				{
					"name": "DerivedGreenTaxi2015Non11"
				},
				{
					"name": "SelectGreenTaxi2014Non01041112"
				},
				{
					"name": "SelectGreenTaxi2015Non11"
				},
				{
					"name": "DriftGreenTaxi201511"
				},
				{
					"name": "DriftGreenTaxi201601"
				},
				{
					"name": "DerivedGreenTaxi201511"
				},
				{
					"name": "DerivedGreenTaxi201601"
				},
				{
					"name": "SelectGreenTaxi201511"
				},
				{
					"name": "SelectGreenTaxi201601"
				},
				{
					"name": "DriftGreenTaxi201602To11"
				},
				{
					"name": "DerivedGreenTaxi201602To11"
				},
				{
					"name": "SelectGreenTaxi201602To11"
				},
				{
					"name": "DriftGreenTaxi201612"
				},
				{
					"name": "DerivedGreenTaxi201612"
				},
				{
					"name": "SelectGreenTaxi201612"
				},
				{
					"name": "DriftGreenTaxi2018201401And04"
				},
				{
					"name": "DerivedGreenTaxi2018201401And04"
				},
				{
					"name": "SelectGreenTaxi2018201401And04"
				},
				{
					"name": "DriftGreenTaxi2017010207080911"
				},
				{
					"name": "DerivedGreenTaxi2017010207080911"
				},
				{
					"name": "SelectGreenTaxi2017010207080911"
				},
				{
					"name": "DriftGreenTaxi2017030405061012"
				},
				{
					"name": "DerivedGreenTaxi2017030405061012"
				},
				{
					"name": "SelectGreenTaxi2017030405061012"
				},
				{
					"name": "DriftGreenTaxi201802030506"
				},
				{
					"name": "DerivedGreenTaxi201802030506"
				},
				{
					"name": "SelectGreenTaxi201802030506"
				},
				{
					"name": "DriftGreenTaxi2018Q3"
				},
				{
					"name": "DriftGreenTaxi2018Q4"
				},
				{
					"name": "DerivedGreenTaxi2018Q3"
				},
				{
					"name": "DerivedGreenTaxi2018Q4"
				},
				{
					"name": "SelectGreenTaxi2018Q3"
				},
				{
					"name": "SelectGreenTaxi2018Q4"
				},
				{
					"name": "DriftGreenTaxi201901To08"
				},
				{
					"name": "DerivedGreenTaxi201901To08"
				},
				{
					"name": "SelectGreenTaxi201901To08"
				},
				{
					"name": "SelectGreenTaxi2019Q4AndOnwards"
				}
			],
			"scriptLines": [
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as integer,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as double,",
				"          congestion_surcharge as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2014/month=02','nyctaxi-staging/transactional-data/type=green/year=2014/month=03','nyctaxi-staging/transactional-data/type=green/year=2014/month=05','nyctaxi-staging/transactional-data/type=green/year=2014/month=06','nyctaxi-staging/transactional-data/type=green/year=2014/month=07','nyctaxi-staging/transactional-data/type=green/year=2014/month=08','nyctaxi-staging/transactional-data/type=green/year=2014/month=09','nyctaxi-staging/transactional-data/type=green/year=2014/month=10']) ~> StagingGreenTaxi2014Non01041112",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as double,",
				"          congestion_surcharge as integer,",
				"          month as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2015/month=0*','nyctaxi-staging/transactional-data/type=green/year=2015/month=10','nyctaxi-staging/transactional-data/type=green/year=2015/month=12']) ~> StagingGreenTaxi2015Non11",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as long,",
				"          congestion_surcharge as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2015/month=11']) ~> StagingGreenTaxi201511",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as double,",
				"          congestion_surcharge as double,",
				"          month as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2016/month=01']) ~> StagingGreenTaxi201601",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as double,",
				"          congestion_surcharge as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2016/month=02','nyctaxi-staging/transactional-data/type=green/year=2016/month=03','nyctaxi-staging/transactional-data/type=green/year=2016/month=04','nyctaxi-staging/transactional-data/type=green/year=2016/month=05','nyctaxi-staging/transactional-data/type=green/year=2016/month=06','nyctaxi-staging/transactional-data/type=green/year=2016/month=07','nyctaxi-staging/transactional-data/type=green/year=2016/month=08','nyctaxi-staging/transactional-data/type=green/year=2016/month=09','nyctaxi-staging/transactional-data/type=green/year=2016/month=10','nyctaxi-staging/transactional-data/type=green/year=2016/month=11']) ~> StagingGreenTaxi201602To11",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as long,",
				"          congestion_surcharge as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2016/month=12']) ~> StagingGreenTaxi201612",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as double,",
				"          congestion_surcharge as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2018/month=01','nyctaxi-staging/transactional-data/type=green/year=2018/month=04','nyctaxi-staging/transactional-data/type=green/year=2014/month=01','nyctaxi-staging/transactional-data/type=green/year=2014/month=04','nyctaxi-staging/transactional-data/type=green/year=2014/month=11','nyctaxi-staging/transactional-data/type=green/year=2014/month=12']) ~> StagingGreenTaxi2018201401And04",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as long,",
				"          congestion_surcharge as integer,",
				"          month as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2017/month=01','nyctaxi-staging/transactional-data/type=green/year=2017/month=02','nyctaxi-staging/transactional-data/type=green/year=2017/month=07','nyctaxi-staging/transactional-data/type=green/year=2017/month=08','nyctaxi-staging/transactional-data/type=green/year=2017/month=09','nyctaxi-staging/transactional-data/type=green/year=2017/month=11']) ~> StagingGreenTaxi2017010207080911",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as double,",
				"          congestion_surcharge as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2017/month=03','nyctaxi-staging/transactional-data/type=green/year=2017/month=04','nyctaxi-staging/transactional-data/type=green/year=2017/month=05','nyctaxi-staging/transactional-data/type=green/year=2017/month=06','nyctaxi-staging/transactional-data/type=green/year=2017/month=10','nyctaxi-staging/transactional-data/type=green/year=2017/month=12']) ~> StagingGreenTaxi2017030405061012",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as long,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as long,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as long,",
				"          trip_type as long,",
				"          congestion_surcharge as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2018/month=02','nyctaxi-staging/transactional-data/type=green/year=2018/month=03','nyctaxi-staging/transactional-data/type=green/year=2018/month=05','nyctaxi-staging/transactional-data/type=green/year=2018/month=06']) ~> StagingGreenTaxi201802030506",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as double,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as double,",
				"          trip_type as double,",
				"          congestion_surcharge as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2018/month=07','nyctaxi-staging/transactional-data/type=green/year=2018/month=08','nyctaxi-staging/transactional-data/type=green/year=2018/month=09']) ~> StagingGreenTaxi2018Q3",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as double,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as double,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as double,",
				"          trip_type as double,",
				"          congestion_surcharge as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2018/month=1*']) ~> StagingGreenTaxi2018Q4",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as double,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as double,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as double,",
				"          trip_type as double,",
				"          congestion_surcharge as double,",
				"          month as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2019/month=01','nyctaxi-staging/transactional-data/type=green/year=2019/month=02','nyctaxi-staging/transactional-data/type=green/year=2019/month=03','nyctaxi-staging/transactional-data/type=green/year=2019/month=04','nyctaxi-staging/transactional-data/type=green/year=2019/month=05','nyctaxi-staging/transactional-data/type=green/year=2019/month=06','nyctaxi-staging/transactional-data/type=green/year=2019/month=07','nyctaxi-staging/transactional-data/type=green/year=2019/month=08']) ~> StagingGreenTaxi201901To08",
				"source(output(",
				"          VendorID as long,",
				"          lpep_pickup_datetime as timestamp,",
				"          lpep_dropoff_datetime as timestamp,",
				"          store_and_fwd_flag as string,",
				"          RatecodeID as double,",
				"          PULocationID as long,",
				"          DOLocationID as long,",
				"          passenger_count as double,",
				"          trip_distance as double,",
				"          fare_amount as double,",
				"          extra as double,",
				"          mta_tax as double,",
				"          tip_amount as double,",
				"          tolls_amount as double,",
				"          ehail_fee as integer,",
				"          improvement_surcharge as double,",
				"          total_amount as double,",
				"          payment_type as double,",
				"          trip_type as double,",
				"          congestion_surcharge as double,",
				"          month as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     wildcardPaths:['nyctaxi-staging/transactional-data/type=green/year=2022/month=*','nyctaxi-staging/transactional-data/type=green/year=2021/month=*','nyctaxi-staging/transactional-data/type=green/year=2020/month=*','nyctaxi-staging/transactional-data/type=green/year=2019/month=09','nyctaxi-staging/transactional-data/type=green/year=2019/month=10','nyctaxi-staging/transactional-data/type=green/year=2019/month=11','nyctaxi-staging/transactional-data/type=green/year=2019/month=12']) ~> StagingGreenTaxi2019Q4AndOnwards",
				"StagingGreenTaxi2019Q4AndOnwards derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi2019Q4AndOnwards",
				"StagingGreenTaxi2014Non01041112 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          improvement_surcharge = toDouble(byName('improvement_surcharge')),",
				"          payment_type = toDouble(byName('payment_type')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2014Non01041112",
				"StagingGreenTaxi2015Non11 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          payment_type = toDouble(byName('payment_type')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2015Non11",
				"DriftGreenTaxi2014Non01041112 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi2014Non01041112",
				"DriftGreenTaxi2015Non11 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi2015Non11",
				"DerivedGreenTaxi2014Non01041112 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2014Non01041112",
				"DerivedGreenTaxi2015Non11 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2015Non11",
				"StagingGreenTaxi201511 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          payment_type = toDouble(byName('payment_type')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge')),",
				"          trip_type = toDouble(byName('trip_type'))) ~> DriftGreenTaxi201511",
				"StagingGreenTaxi201601 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          payment_type = toDouble(byName('payment_type'))) ~> DriftGreenTaxi201601",
				"DriftGreenTaxi201511 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi201511",
				"DriftGreenTaxi201601 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi201601",
				"DerivedGreenTaxi201511 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201511",
				"DerivedGreenTaxi201601 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201601",
				"StagingGreenTaxi201602To11 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          payment_type = toDouble(byName('payment_type')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi201602To11",
				"DriftGreenTaxi201602To11 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi201602To11",
				"DerivedGreenTaxi201602To11 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201602To11",
				"StagingGreenTaxi201612 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          payment_type = toDouble(byName('payment_type')),",
				"          trip_type = toDouble(byName('trip_type')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi201612",
				"DriftGreenTaxi201612 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi201612",
				"DerivedGreenTaxi201612 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201612",
				"StagingGreenTaxi2018201401And04 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          payment_type = toDouble(byName('payment_type')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2018201401And04",
				"DriftGreenTaxi2018201401And04 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi2018201401And04",
				"DerivedGreenTaxi2018201401And04 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2018201401And04",
				"StagingGreenTaxi2017010207080911 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          payment_type = toDouble(byName('payment_type')),",
				"          trip_type = toDouble(byName('trip_type')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2017010207080911",
				"DriftGreenTaxi2017010207080911 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi2017010207080911",
				"DerivedGreenTaxi2017010207080911 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2017010207080911",
				"StagingGreenTaxi2017030405061012 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          payment_type = toDouble(byName('payment_type')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2017030405061012",
				"DriftGreenTaxi2017030405061012 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi2017030405061012",
				"DerivedGreenTaxi2017030405061012 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2017030405061012",
				"StagingGreenTaxi201802030506 derive(RatecodeID = toDouble(byName('RatecodeID')),",
				"          passenger_count = toDouble(byName('passenger_count')),",
				"          payment_type = toDouble(byName('payment_type')),",
				"          trip_type = toDouble(byName('trip_type')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi201802030506",
				"DriftGreenTaxi201802030506 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi201802030506",
				"DerivedGreenTaxi201802030506 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201802030506",
				"StagingGreenTaxi2018Q3 derive(congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2018Q3",
				"StagingGreenTaxi2018Q4 derive(ehail_fee = toInteger(byName('ehail_fee')),",
				"          congestion_surcharge = toDouble(byName('congestion_surcharge'))) ~> DriftGreenTaxi2018Q4",
				"DriftGreenTaxi2018Q3 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi2018Q3",
				"DriftGreenTaxi2018Q4 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi2018Q4",
				"DerivedGreenTaxi2018Q3 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2018Q3",
				"DerivedGreenTaxi2018Q4 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2018Q4",
				"StagingGreenTaxi201901To08 derive(ehail_fee = toInteger(byName('ehail_fee'))) ~> DriftGreenTaxi201901To08",
				"DriftGreenTaxi201901To08 derive(trip_year = toInteger(left(toString(lpep_pickup_datetime),4)),",
				"          trip_month = toInteger(substring(toString(lpep_pickup_datetime), 6, 2)),",
				"          taxi_type = 'green') ~> DerivedGreenTaxi201901To08",
				"DerivedGreenTaxi201901To08 select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi201901To08",
				"DerivedGreenTaxi2019Q4AndOnwards select(mapColumn(",
				"          vendor_id = VendorID,",
				"          pickup_datetime = lpep_pickup_datetime,",
				"          dropoff_datetime = lpep_dropoff_datetime,",
				"          store_and_fwd_flag,",
				"          rate_code_id = RatecodeID,",
				"          pickup_location_id = PULocationID,",
				"          dropoff_location_id = DOLocationID,",
				"          passenger_count,",
				"          trip_distance,",
				"          fare_amount,",
				"          extra,",
				"          mta_tax,",
				"          tip_amount,",
				"          tolls_amount,",
				"          ehail_fee,",
				"          improvement_surcharge,",
				"          total_amount,",
				"          payment_type,",
				"          trip_type,",
				"          congestion_surcharge,",
				"          trip_year,",
				"          trip_month,",
				"          taxi_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectGreenTaxi2019Q4AndOnwards",
				"SelectGreenTaxi2014Non01041112 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi2014Non01041112",
				"SelectGreenTaxi2015Non11 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi2015Non11",
				"SelectGreenTaxi201511 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi201511",
				"SelectGreenTaxi201601 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi201601",
				"SelectGreenTaxi201602To11 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi201602To11",
				"SelectGreenTaxi201612 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi201612",
				"SelectGreenTaxi2018201401And04 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi2018201401And04",
				"SelectGreenTaxi2017010207080911 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi2017010207080911",
				"SelectGreenTaxi2017030405061012 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi2017030405061012",
				"SelectGreenTaxi201802030506 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi201802030506",
				"SelectGreenTaxi2018Q3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi2018Q3",
				"SelectGreenTaxi2018Q4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi2018Q4",
				"SelectGreenTaxi201901To08 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi201901To08",
				"SelectGreenTaxi2019Q4AndOnwards sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          trip_year,",
				"          trip_month",
				"     )) ~> PersistGreenTaxi2019Q4AndOnwards"
			]
		}
	}
}