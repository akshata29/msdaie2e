{
	"name": "05 - Query Nested Types in JSON and Parquet Files",
	"properties": {
		"folder": {
			"name": "OpenDatasets/SQL Serverless"
		},
		"content": {
			"query": "/* The example extracts scalar and objects values from COVID-19 Open Research Dataset JSON file with nested objects is shown below.*/\nSELECT\n    title = JSON_VALUE(doc, '$.metadata.title'),\n    first_author = JSON_QUERY(doc, '$.metadata.authors[0]'),\n    first_author_name = JSON_VALUE(doc, '$.metadata.authors[0].first'),\n    complex_object = doc\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/covid19temp/comm_use_subset/pdf_json/000b7d1517ceebb34e1e3e817695b6de03e2fa78.json',\n        FORMAT='CSV', FIELDTERMINATOR ='0x0b', FIELDQUOTE = '0x0b', ROWTERMINATOR = '0x0b'\n    )\n    WITH ( doc varchar(MAX) ) AS docs;\n\n\n/* Project nested or repeated data */\nSELECT\n    DateStruct, TimeStruct, TimestampStruct, DecimalStruct, FloatStruct\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/structExample.parquet',\n        FORMAT='PARQUET'\n    )\n    WITH (\n        DateStruct VARCHAR(8000),\n        TimeStruct VARCHAR(8000),\n        TimestampStruct VARCHAR(8000),\n        DecimalStruct VARCHAR(8000),\n        FloatStruct VARCHAR(8000)\n    ) AS [r];\n\n/* The following query reads the justSimpleArray.parquet file. */\nSELECT\n    SimpleArray\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/justSimpleArray.parquet',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n\n/* Read properties from nested object columns */\nSELECT\n    title = JSON_VALUE(complex_column, '$.metadata.title'),\n    first_author_name = JSON_VALUE(complex_column, '$.metadata.authors[0].first'),\n    body_text = JSON_VALUE(complex_column, '$.body_text.text'),\n    complex_column\nFROM\n    OPENROWSET( BULK 'https://azureopendatastorage.blob.core.windows.net/covid19temp/comm_use_subset/pdf_json/000b7d1517ceebb34e1e3e817695b6de03e2fa78.json',\n                FORMAT='CSV', FIELDTERMINATOR ='0x0b', FIELDQUOTE = '0x0b', ROWTERMINATOR = '0x0b' ) WITH ( complex_column varchar(MAX) ) AS docs;\n\n/* The following query reads the structExample.parquet file and shows how to surface elements of a nested column. */\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/structExample.parquet',\n        FORMAT='PARQUET'\n    )\n    WITH (\n        [DateValue] DATE '$.DateStruct.Date',\n        [TimeStruct.Time] TIME,\n        [TimestampStruct.Timestamp] DATETIME2,\n        DecimalValue DECIMAL(18, 5) '$.DecimalStruct.Decimal',\n        [FloatStruct.Float] FLOAT\n    ) AS [r];\n\n\n/* Access elements from repeated columns */\nSELECT\n    *,\n    JSON_VALUE(SimpleArray, '$[0]') AS FirstElement,\n    JSON_VALUE(SimpleArray, '$[1]') AS SecondElement,\n    JSON_VALUE(SimpleArray, '$[2]') AS ThirdElement\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/justSimpleArray.parquet',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n\n/* Access sub-objects from complex columns */\nSELECT\n    MapOfPersons,\n    JSON_QUERY(MapOfPersons, '$.\"John Doe\"') AS [John]\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/mapExample.parquet',\n        FORMAT='PARQUET'\n    ) AS [r];\n\n/* Explicitly reference the columns that you want to return in WITH clause */\nSELECT DocId,\n    MapOfPersons,\n    JSON_QUERY(MapOfPersons, '$.\"John Doe\"') AS [John]\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/mapExample.parquet',\n        FORMAT='PARQUET'\n    )\n    WITH (DocId bigint, MapOfPersons VARCHAR(max)) AS [r];\n\n\n/* Project values from repeated columns */\nSELECT\n    SimpleArray, Element\nFROM\n    OPENROWSET(\n        BULK 'https://sqlondemandstorage.blob.core.windows.net/public-parquet/nested/justSimpleArray.parquet',\n        FORMAT='PARQUET'\n    ) AS arrays\n    CROSS APPLY OPENJSON (SimpleArray) WITH (Element int '$') as array_values\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}